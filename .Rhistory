## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
# The below function makeCacheMatrix creates a list containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of inverse of the matrix
# 4. get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## Write a short comment describing this function
# The below function returns the inverse of the matrix by first checking if
# the inverse has already been determined. In case its done it gets the result
# and does not determine the inverse again. If not, it determines the inverse
# and sets the value in the cache using the setinverse function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data.")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
> x = rbind(c(1, -1/4), c(-1/4, 1))
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
> m$get()
m$get()
cacheSolve(m)
cacheSolve(m)
## A short comment describing this function
# The below function makeCacheMatrix creates a list containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of inverse of the matrix
# 4. get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## A short comment describing this function
# The below function returns the inverse of the matrix by first checking if
# the inverse has already been determined. In case its done it gets the result
# and does not determine the inverse again. If not, it determines the inverse
# and sets the value in the cache using the setinverse function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data.")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
x = rbind(c(1, -1/4), c(-1/4, 1))
cacheSolve(m)
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
## Comments describing this function
# The below function makeCacheMatrix creates a list containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of inverse of the matrix
# 4. get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(matinv) m <<- matinv
getinverse <- function() m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## Comments describing this function
# The below function returns the inverse of the matrix by first checking if
# the inverse has already been computed. In case its done it gets the result
# and does not compute the inverse again. If not, it computes the inverse
# and sets the value in the cache using the setinverse function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data.")
return(m)
}
matrixdata <- x$get()
## Computing the inverse of a square matrix with the solve function
m <- solve(matrixdata)
x$setinverse(m)
m
}
x = rbind(c(1, -1/2), c(-1/2, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
# (as per assignment instructions)
## Comments describing this function
# The below function makeCacheMatrix creates a list containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of inverse of the matrix
# 4. get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(matinv) m <<- matinv
getinverse <- function() m
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
## Comments describing this function
# The below function returns the inverse of the matrix by first checking if
# the inverse has already been computed. In case its done it gets the result
# and does not compute the inverse again. If not, it computes the inverse
# and sets the value in the cache using the setinverse function.
# The below function assumes that the matrix supplied is always invertible
# (as per assignment instructions)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data.")
return(m)
}
matrixdata <- x$get()
## Computing the inverse of a square matrix with the solve function
m <- solve(matrixdata)
x$setinverse(m)
m
}
x = rbind(c(1, -1/3), c(-1/3, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
